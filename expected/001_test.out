INSERT INTO config (source, target, pkey, priority, parts, trunc, condition, batchsize) VALUES
-- t1 will be copied in a single operation
    ('source.t1', 'public.t1', 'id', 100, 1, true, null, null),
-- t2 will be dispatched to two jobs, each will insert data with a batch size of 200
    ('source.t2', 'public.t2', 'id', 1, 2, false, null, 200),
-- t3 will be copied with a condition that filters negative values
    ('source.t3', 'public.t3', 'id', 200, 2, true, 'value >= 0', null);
INSERT 0 3
SELECT * FROM config;
  source   |  target   | pkey | priority | parts | condition  | batchsize | trunc 
-----------+-----------+------+----------+-------+------------+-----------+-------
 source.t1 | public.t1 | id   |      100 |     1 |            |           | t
 source.t2 | public.t2 | id   |        1 |     2 |            |       200 | f
 source.t3 | public.t3 | id   |      200 |     2 | value >= 0 |           | t
(3 rows)

-- "plan" must order the jobs by priority (lower first)
SELECT target, invocation FROM plan();
  target   |    invocation     
-----------+-------------------
 public.t2 | CALL fdw.copy(1);
 public.t2 | CALL fdw.copy(2);
 public.t1 | CALL fdw.copy(3);
 public.t3 | CALL fdw.copy(4);
 public.t3 | CALL fdw.copy(5);
(5 rows)

-- "report" view shows the aggregated state for each target table
SELECT * FROM report WHERE stage_id = 1;
 stage_id |  target   | job_start |  state  | rows | elapsed | rate 
----------+-----------+-----------+---------+------+---------+------
        1 | public.t1 |           | pending |    0 |         |     
        1 | public.t2 |           | pending |    0 |         |     
        1 | public.t3 |           | pending |    0 |         |     
(3 rows)

-- copy(1) and copy(2) should share an half of the data from source.t2
CALL copy(1);
NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 0 AND id % 2 = 0 ORDER BY id LIMIT 200
NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 400 AND id % 2 = 0 ORDER BY id LIMIT 200
NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 800 AND id % 2 = 0 ORDER BY id LIMIT 200
NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 1000 AND id % 2 = 0 ORDER BY id LIMIT 200
CALL
CALL copy(2);
NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 0 AND id % 2 = 1 ORDER BY id LIMIT 200
NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 399 AND id % 2 = 1 ORDER BY id LIMIT 200
NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 799 AND id % 2 = 1 ORDER BY id LIMIT 200
NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 999 AND id % 2 = 1 ORDER BY id LIMIT 200
CALL
SELECT stage_id, job_id, target, part, lastseq, rows, state
  FROM job WHERE stage_id = 1 ORDER BY job_id;
 stage_id | job_id |  target   | part | lastseq | rows |   state   
----------+--------+-----------+------+---------+------+-----------
        1 |      1 | public.t2 |    0 |    1000 |  500 | completed
        1 |      2 | public.t2 |    1 |     999 |  500 | completed
        1 |      3 | public.t1 |    0 |       0 |    0 | pending
        1 |      4 | public.t3 |    0 |       0 |    0 | pending
        1 |      5 | public.t3 |    1 |       0 |    0 | pending
(5 rows)

INSERT INTO source.t2 (id, age, name)
    SELECT i, i, 'name' || i FROM generate_series(1001, 2000) i;
INSERT 0 1000
-- copy(1) and copy(2) should continue from where they left
CALL copy(1);
NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 1000 AND id % 2 = 0 ORDER BY id LIMIT 200
NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 1400 AND id % 2 = 0 ORDER BY id LIMIT 200
NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 1800 AND id % 2 = 0 ORDER BY id LIMIT 200
NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 2000 AND id % 2 = 0 ORDER BY id LIMIT 200
CALL
CALL copy(2);
NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 999 AND id % 2 = 1 ORDER BY id LIMIT 200
NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 1399 AND id % 2 = 1 ORDER BY id LIMIT 200
NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 1799 AND id % 2 = 1 ORDER BY id LIMIT 200
NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 1999 AND id % 2 = 1 ORDER BY id LIMIT 200
CALL
SELECT stage_id, job_id, target, part, lastseq, rows, state
  FROM job WHERE stage_id = 1 ORDER BY job_id;
 stage_id | job_id |  target   | part | lastseq | rows |   state   
----------+--------+-----------+------+---------+------+-----------
        1 |      1 | public.t2 |    0 |    2000 | 1000 | completed
        1 |      2 | public.t2 |    1 |    1999 | 1000 | completed
        1 |      3 | public.t1 |    0 |       0 |    0 | pending
        1 |      4 | public.t3 |    0 |       0 |    0 | pending
        1 |      5 | public.t3 |    1 |       0 |    0 | pending
(5 rows)

-- copy(3) should truncate public.t1 as it is a new stage
CALL copy(3);
NOTICE:  Executing: TRUNCATE public.t1
NOTICE:  Executing: INSERT INTO public.t1 SELECT id, name FROM source.t1 WHERE id > 0  ORDER BY id 
CALL
-- copy(3) should do nothing more because there is no new data in source.t1
CALL copy(3);
NOTICE:  Executing: INSERT INTO public.t1 SELECT id, name FROM source.t1 WHERE id > 100  ORDER BY id 
CALL
SELECT stage_id, job_id, target, part, lastseq, rows, state
  FROM job WHERE stage_id = 1 ORDER BY job_id;
 stage_id | job_id |  target   | part | lastseq | rows |   state   
----------+--------+-----------+------+---------+------+-----------
        1 |      1 | public.t2 |    0 |    2000 | 1000 | completed
        1 |      2 | public.t2 |    1 |    1999 | 1000 | completed
        1 |      3 | public.t1 |    0 |     100 |  100 | completed
        1 |      4 | public.t3 |    0 |       0 |    0 | pending
        1 |      5 | public.t3 |    1 |       0 |    0 | pending
(5 rows)

-- copy(4) and copy(5) should copy the positive values from source.t3
CALL copy(4);
NOTICE:  Executing: TRUNCATE public.t3
NOTICE:  Executing: INSERT INTO public.t3 SELECT id, value FROM source.t3 WHERE id > 0 AND id % 2 = 0 AND value >= 0 ORDER BY id 
CALL
CALL copy(5);
NOTICE:  Executing: TRUNCATE public.t3
NOTICE:  Executing: INSERT INTO public.t3 SELECT id, value FROM source.t3 WHERE id > 0 AND id % 2 = 1 AND value >= 0 ORDER BY id 
CALL
-- "report" view should compiles the state of the last stage for each relation
SELECT stage_id, target, rows, state
  FROM report WHERE stage_id = 1 ORDER BY target;
 stage_id |  target   | rows |   state   
----------+-----------+------+-----------
        1 | public.t1 |  100 | completed
        1 | public.t2 | 2000 | completed
        1 | public.t3 |  100 | completed
(3 rows)


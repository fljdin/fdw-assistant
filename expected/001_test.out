INSERT INTO tools.config (source, target, pkey, condition, batchsize, trunc) VALUES
-- t1 will be copied in a single operation
    ('source.t1', 'public.t1', 'id', null, null, true),
-- t2 will be dispatched to two jobs, each will insert data with a batch size of 200
    ('source.t2', 'public.t2', 'id', 'id % 2 = 0', 200, false),
    ('source.t2', 'public.t2', 'id', 'id % 2 = 1', 200, false);
INSERT 0 3
SELECT * FROM config;
 config_id |  source   |  target   | pkey | condition  | batchsize | trunc 
-----------+-----------+-----------+------+------------+-----------+-------
         1 | source.t1 | public.t1 | id   |            |           | t
         2 | source.t2 | public.t2 | id   | id % 2 = 0 |       200 | f
         3 | source.t2 | public.t2 | id   | id % 2 = 1 |       200 | f
(3 rows)

SELECT target, statement FROM run();
  target   |      statement       
-----------+----------------------
 public.t1 | CALL tools.start(1);
 public.t2 | CALL tools.start(2);
 public.t2 | CALL tools.start(3);
(3 rows)

-- "report" view shows the aggregated state for each target table
SELECT * FROM report WHERE run_id = 1;
 run_id |  target   | job_start |  state  | rows | elapsed | rate 
--------+-----------+-----------+---------+------+---------+------
      1 | public.t1 |           | pending |    0 |         |     
      1 | public.t2 |           | pending |    0 |         |     
(2 rows)

-- start(1) should truncate public.t1 as configured
CALL start(1);
psql:sql/001_test.sql:17: NOTICE:  Executing: TRUNCATE public.t1
psql:sql/001_test.sql:17: NOTICE:  Executing: INSERT INTO public.t1 SELECT id, name FROM source.t1 WHERE id > 0  ORDER BY id 
CALL
SELECT run_id, job_id, config_id, lastseq, rows, state
  FROM job WHERE run_id = 1 ORDER BY job_id;
 run_id | job_id | config_id | lastseq | rows |   state   
--------+--------+-----------+---------+------+-----------
      1 |      1 |         1 |     100 |  100 | completed
      1 |      2 |         2 |       0 |    0 | pending
      1 |      3 |         3 |       0 |    0 | pending
(3 rows)

-- start(2) and start(3) should share an half of the data from source.t2
CALL start(2);
psql:sql/001_test.sql:23: NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 0 AND id % 2 = 0 ORDER BY id LIMIT 200
psql:sql/001_test.sql:23: NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 400 AND id % 2 = 0 ORDER BY id LIMIT 200
psql:sql/001_test.sql:23: NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 800 AND id % 2 = 0 ORDER BY id LIMIT 200
psql:sql/001_test.sql:23: NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 1000 AND id % 2 = 0 ORDER BY id LIMIT 200
CALL
CALL start(3);
psql:sql/001_test.sql:24: NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 0 AND id % 2 = 1 ORDER BY id LIMIT 200
psql:sql/001_test.sql:24: NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 399 AND id % 2 = 1 ORDER BY id LIMIT 200
psql:sql/001_test.sql:24: NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 799 AND id % 2 = 1 ORDER BY id LIMIT 200
psql:sql/001_test.sql:24: NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 999 AND id % 2 = 1 ORDER BY id LIMIT 200
CALL
SELECT run_id, job_id, config_id, lastseq, rows, state
  FROM job WHERE run_id = 1 ORDER BY job_id;
 run_id | job_id | config_id | lastseq | rows |   state   
--------+--------+-----------+---------+------+-----------
      1 |      1 |         1 |     100 |  100 | completed
      1 |      2 |         2 |    1000 |  500 | completed
      1 |      3 |         3 |     999 |  500 | completed
(3 rows)

INSERT INTO source.t2 (id, age, name)
    SELECT i, i, 'name' || i FROM generate_series(1001, 2000) i;
INSERT 0 1000
-- start(2) and start(3) should continue from where they left
-- whithout truncating the target table
CALL start(2);
psql:sql/001_test.sql:34: NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 1000 AND id % 2 = 0 ORDER BY id LIMIT 200
psql:sql/001_test.sql:34: NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 1400 AND id % 2 = 0 ORDER BY id LIMIT 200
psql:sql/001_test.sql:34: NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 1800 AND id % 2 = 0 ORDER BY id LIMIT 200
psql:sql/001_test.sql:34: NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 2000 AND id % 2 = 0 ORDER BY id LIMIT 200
CALL
CALL start(3);
psql:sql/001_test.sql:35: NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 999 AND id % 2 = 1 ORDER BY id LIMIT 200
psql:sql/001_test.sql:35: NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 1399 AND id % 2 = 1 ORDER BY id LIMIT 200
psql:sql/001_test.sql:35: NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 1799 AND id % 2 = 1 ORDER BY id LIMIT 200
psql:sql/001_test.sql:35: NOTICE:  Executing: INSERT INTO public.t2 SELECT id, name, age FROM source.t2 WHERE id > 1999 AND id % 2 = 1 ORDER BY id LIMIT 200
CALL
SELECT run_id, job_id, config_id, lastseq, rows, state
  FROM job WHERE run_id = 1 ORDER BY job_id;
 run_id | job_id | config_id | lastseq | rows |   state   
--------+--------+-----------+---------+------+-----------
      1 |      1 |         1 |     100 |  100 | completed
      1 |      2 |         2 |    2000 | 1000 | completed
      1 |      3 |         3 |    1999 | 1000 | completed
(3 rows)

SELECT run_id, target, rows, state
  FROM report WHERE run_id = 1 ORDER BY target;
 run_id |  target   | rows |   state   
--------+-----------+------+-----------
      1 | public.t1 |  100 | completed
      1 | public.t2 | 2000 | completed
(2 rows)

